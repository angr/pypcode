name: Build

on: [push, pull_request]

permissions:
  contents: read

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: '3.10'
      - run: |
          python -m pip install pylint
          python -m pip install -e .
      - uses: pre-commit/action@2c7b3805fd2a0fd8c1884dcaebf91fc102a13ecd # v3.0.1
        with:
          extra_args: pylint --all-files

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: '3.10'
      - name: Build sdist
        run: |
          python -m pip install --user build
          python -m build --sdist
      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: source
          path: dist/*.tar.gz

  build_wheels:
    needs: build_sdist
    name: Build wheel ${{ matrix.py }}-${{ matrix.platform.wheel_tag }} on ${{ matrix.platform.os }}
    runs-on: ${{ matrix.platform.os }}
    strategy:
      matrix:
        py: [cp310, cp311, cp312, cp313, cp314]
        platform:
          - { arch: x86_64,  os: windows-latest,   wheel_tag: win_amd64         }
          - { arch: x86_64,  os: macos-13,         wheel_tag: macosx_x86_64     }
          - { arch: arm64,   os: macos-latest,     wheel_tag: macosx_arm64      }
          - { arch: x86_64,  os: ubuntu-latest,    wheel_tag: manylinux_x86_64  }
          - { arch: aarch64, os: ubuntu-24.04-arm, wheel_tag: manylinux_aarch64 }
    steps:
      - name: Download source distribution
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: source
      - name: Unpack source distribution
        shell: bash
        run: tar --strip-components 1 -xvf *.tar.gz
      - name: Build wheel
        uses: pypa/cibuildwheel@7c619efba910c04005a835b110b057fc28fd6e93 # v3.2.0
        with:
          output-dir: wheelhouse
        env:
          CIBW_ARCHS_MACOS: ${{ matrix.platform.arch }}
          CIBW_BUILD: ${{ matrix.py }}-${{ matrix.platform.wheel_tag }}
          CIBW_TEST_COMMAND: python -m unittest discover -v -s {package}/tests
          CIBW_BUILD_VERBOSITY: 1
          MACOSX_DEPLOYMENT_TARGET: ${{ matrix.platform.arch == 'arm64' && '11' || '10.14' }}
      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ${{ matrix.py }}-${{ matrix.platform.wheel_tag }}
          path: ./wheelhouse/*.whl

  build_docs:
    name: Build docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: '3.12'
      - run: |
          pip install -e .[docs]
          cd docs && make html coverage

  test_coverage:
    name: Test with coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: '3.13'
      - name: Run tests
        run: |
          pip install setuptools nanobind cmake
          COVERAGE=1 pip install --no-build-isolation -e .[testing]
          pytest -vv \
            --junitxml=junit.xml -o junit_family=legacy \
            --cov-report=xml \
            || [[ $? -lt 2 ]]  # Accept success and test failures, fail on infrastructure problems (exit codes >1)
          gcovr -r . \
            --print-summary \
            --xml-pretty \
            -o coverage-native.xml \
            --gcov-filter 'pypcode_native.cpp'
          [[ -e ./junit.xml && -e coverage.xml && -e ./coverage-native.xml ]]
      - name: Upload test results
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: results
          include-hidden-files: true
          if-no-files-found: error
          path: |
            ./junit.xml
            ./coverage.xml
            ./coverage-native.xml

  upload_coverage:
    name: Upload test results to Codecov
    needs: [test_coverage]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: results
      - name: Upload test coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          use_oidc: true
          fail_ci_if_error: true
          verbose: true
          files: ./coverage.xml ./coverage-native.xml
      - name: Upload test results to Codecov
        uses: codecov/test-results-action@47f89e9acb64b76debcd5ea40642d25a4adced9f # v1
        with:
          use_oidc: true
          fail_ci_if_error: true
          verbose: true
          files: ./junit.xml

  upload_pypi:
    name: Upload wheels to PyPI
    needs: [lint, build_docs, build_sdist, build_wheels, upload_coverage]
    environment:
      name: pypi
      url: https://pypi.org/p/pypcode
    permissions:
      id-token: write
    runs-on: ubuntu-latest
    # Upload to PyPI on every tag starting with 'v'
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          path: artifacts
      - run: |
          mkdir dist
          find artifacts -type f -exec mv {} dist \;
      - uses: pypa/gh-action-pypi-publish@ed0c53931b1dc9bd32cbe73a98c7f6766f8a527e # v1.13.0
